import { toArray } from '@orbit/utils';
import { buildTransform } from '@orbit/data';
import { GetOperators } from "./get-operators";
function deserialize(source, document) {
    var deserialized = source.serializer.deserializeDocument(document);
    var records = toArray(deserialized.data);
    if (deserialized.included) {
        Array.prototype.push.apply(records, deserialized.included);
    }
    var operations = records.map(function (record) {
        return {
            op: 'replaceRecord',
            record: record
        };
    });
    var transforms = [buildTransform(operations)];
    var primaryData = deserialized.data;
    return { transforms: transforms, primaryData: primaryData };
}
export var QueryOperators = {
    findRecord: function (source, query) {
        return GetOperators.findRecord(source, query).then(function (data) {
            return deserialize(source, data);
        });
    },
    findRecords: function (source, query) {
        return GetOperators.findRecords(source, query).then(function (data) {
            return deserialize(source, data);
        });
    },
    findRelatedRecord: function (source, query) {
        return GetOperators.findRelatedRecord(source, query).then(function (data) {
            return deserialize(source, data);
        });
    },
    findRelatedRecords: function (source, query) {
        return GetOperators.findRelatedRecords(source, query).then(function (data) {
            return deserialize(source, data);
        });
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9xdWVyeS1vcGVyYXRvcnMuanMiXSwibmFtZXMiOlsidG9BcnJheSIsImJ1aWxkVHJhbnNmb3JtIiwiR2V0T3BlcmF0b3JzIiwiZGVzZXJpYWxpemUiLCJzb3VyY2UiLCJkb2N1bWVudCIsImRlc2VyaWFsaXplZCIsInNlcmlhbGl6ZXIiLCJkZXNlcmlhbGl6ZURvY3VtZW50IiwicmVjb3JkcyIsImRhdGEiLCJpbmNsdWRlZCIsIkFycmF5IiwicHJvdG90eXBlIiwicHVzaCIsImFwcGx5Iiwib3BlcmF0aW9ucyIsIm1hcCIsIm9wIiwicmVjb3JkIiwidHJhbnNmb3JtcyIsInByaW1hcnlEYXRhIiwiUXVlcnlPcGVyYXRvcnMiLCJmaW5kUmVjb3JkIiwicXVlcnkiLCJ0aGVuIiwiZmluZFJlY29yZHMiLCJmaW5kUmVsYXRlZFJlY29yZCIsImZpbmRSZWxhdGVkUmVjb3JkcyJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsT0FBVCxRQUF3QixjQUF4QjtBQUNBLFNBQVNDLGNBQVQsUUFBK0IsYUFBL0I7QUFDQSxTQUFTQyxZQUFULFFBQTZCLGlCQUE3QjtBQUNBLFNBQVNDLFdBQVQsQ0FBcUJDLE1BQXJCLEVBQTZCQyxRQUE3QixFQUF1QztBQUNuQyxRQUFNQyxlQUFlRixPQUFPRyxVQUFQLENBQWtCQyxtQkFBbEIsQ0FBc0NILFFBQXRDLENBQXJCO0FBQ0EsUUFBTUksVUFBVVQsUUFBUU0sYUFBYUksSUFBckIsQ0FBaEI7QUFDQSxRQUFJSixhQUFhSyxRQUFqQixFQUEyQjtBQUN2QkMsY0FBTUMsU0FBTixDQUFnQkMsSUFBaEIsQ0FBcUJDLEtBQXJCLENBQTJCTixPQUEzQixFQUFvQ0gsYUFBYUssUUFBakQ7QUFDSDtBQUNELFFBQU1LLGFBQWFQLFFBQVFRLEdBQVIsQ0FBWSxrQkFBVTtBQUNyQyxlQUFPO0FBQ0hDLGdCQUFJLGVBREQ7QUFFSEM7QUFGRyxTQUFQO0FBSUgsS0FMa0IsQ0FBbkI7QUFNQSxRQUFJQyxhQUFhLENBQUNuQixlQUFlZSxVQUFmLENBQUQsQ0FBakI7QUFDQSxRQUFJSyxjQUFjZixhQUFhSSxJQUEvQjtBQUNBLFdBQU8sRUFBRVUsc0JBQUYsRUFBY0Msd0JBQWQsRUFBUDtBQUNIO0FBQ0QsT0FBTyxJQUFNQyxpQkFBaUI7QUFDMUJDLGNBRDBCLFlBQ2ZuQixNQURlLEVBQ1BvQixLQURPLEVBQ0E7QUFDdEIsZUFBT3RCLGFBQWFxQixVQUFiLENBQXdCbkIsTUFBeEIsRUFBZ0NvQixLQUFoQyxFQUF1Q0MsSUFBdkMsQ0FBNEM7QUFBQSxtQkFBUXRCLFlBQVlDLE1BQVosRUFBb0JNLElBQXBCLENBQVI7QUFBQSxTQUE1QyxDQUFQO0FBQ0gsS0FIeUI7QUFJMUJnQixlQUowQixZQUlkdEIsTUFKYyxFQUlOb0IsS0FKTSxFQUlDO0FBQ3ZCLGVBQU90QixhQUFhd0IsV0FBYixDQUF5QnRCLE1BQXpCLEVBQWlDb0IsS0FBakMsRUFBd0NDLElBQXhDLENBQTZDO0FBQUEsbUJBQVF0QixZQUFZQyxNQUFaLEVBQW9CTSxJQUFwQixDQUFSO0FBQUEsU0FBN0MsQ0FBUDtBQUNILEtBTnlCO0FBTzFCaUIscUJBUDBCLFlBT1J2QixNQVBRLEVBT0FvQixLQVBBLEVBT087QUFDN0IsZUFBT3RCLGFBQWF5QixpQkFBYixDQUErQnZCLE1BQS9CLEVBQXVDb0IsS0FBdkMsRUFBOENDLElBQTlDLENBQW1EO0FBQUEsbUJBQVF0QixZQUFZQyxNQUFaLEVBQW9CTSxJQUFwQixDQUFSO0FBQUEsU0FBbkQsQ0FBUDtBQUNILEtBVHlCO0FBVTFCa0Isc0JBVjBCLFlBVVB4QixNQVZPLEVBVUNvQixLQVZELEVBVVE7QUFDOUIsZUFBT3RCLGFBQWEwQixrQkFBYixDQUFnQ3hCLE1BQWhDLEVBQXdDb0IsS0FBeEMsRUFBK0NDLElBQS9DLENBQW9EO0FBQUEsbUJBQVF0QixZQUFZQyxNQUFaLEVBQW9CTSxJQUFwQixDQUFSO0FBQUEsU0FBcEQsQ0FBUDtBQUNIO0FBWnlCLENBQXZCIiwiZmlsZSI6ImxpYi9xdWVyeS1vcGVyYXRvcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0b0FycmF5IH0gZnJvbSAnQG9yYml0L3V0aWxzJztcbmltcG9ydCB7IGJ1aWxkVHJhbnNmb3JtIH0gZnJvbSAnQG9yYml0L2RhdGEnO1xuaW1wb3J0IHsgR2V0T3BlcmF0b3JzIH0gZnJvbSBcIi4vZ2V0LW9wZXJhdG9yc1wiO1xuZnVuY3Rpb24gZGVzZXJpYWxpemUoc291cmNlLCBkb2N1bWVudCkge1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IHNvdXJjZS5zZXJpYWxpemVyLmRlc2VyaWFsaXplRG9jdW1lbnQoZG9jdW1lbnQpO1xuICAgIGNvbnN0IHJlY29yZHMgPSB0b0FycmF5KGRlc2VyaWFsaXplZC5kYXRhKTtcbiAgICBpZiAoZGVzZXJpYWxpemVkLmluY2x1ZGVkKSB7XG4gICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHJlY29yZHMsIGRlc2VyaWFsaXplZC5pbmNsdWRlZCk7XG4gICAgfVxuICAgIGNvbnN0IG9wZXJhdGlvbnMgPSByZWNvcmRzLm1hcChyZWNvcmQgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgb3A6ICdyZXBsYWNlUmVjb3JkJyxcbiAgICAgICAgICAgIHJlY29yZFxuICAgICAgICB9O1xuICAgIH0pO1xuICAgIGxldCB0cmFuc2Zvcm1zID0gW2J1aWxkVHJhbnNmb3JtKG9wZXJhdGlvbnMpXTtcbiAgICBsZXQgcHJpbWFyeURhdGEgPSBkZXNlcmlhbGl6ZWQuZGF0YTtcbiAgICByZXR1cm4geyB0cmFuc2Zvcm1zLCBwcmltYXJ5RGF0YSB9O1xufVxuZXhwb3J0IGNvbnN0IFF1ZXJ5T3BlcmF0b3JzID0ge1xuICAgIGZpbmRSZWNvcmQoc291cmNlLCBxdWVyeSkge1xuICAgICAgICByZXR1cm4gR2V0T3BlcmF0b3JzLmZpbmRSZWNvcmQoc291cmNlLCBxdWVyeSkudGhlbihkYXRhID0+IGRlc2VyaWFsaXplKHNvdXJjZSwgZGF0YSkpO1xuICAgIH0sXG4gICAgZmluZFJlY29yZHMoc291cmNlLCBxdWVyeSkge1xuICAgICAgICByZXR1cm4gR2V0T3BlcmF0b3JzLmZpbmRSZWNvcmRzKHNvdXJjZSwgcXVlcnkpLnRoZW4oZGF0YSA9PiBkZXNlcmlhbGl6ZShzb3VyY2UsIGRhdGEpKTtcbiAgICB9LFxuICAgIGZpbmRSZWxhdGVkUmVjb3JkKHNvdXJjZSwgcXVlcnkpIHtcbiAgICAgICAgcmV0dXJuIEdldE9wZXJhdG9ycy5maW5kUmVsYXRlZFJlY29yZChzb3VyY2UsIHF1ZXJ5KS50aGVuKGRhdGEgPT4gZGVzZXJpYWxpemUoc291cmNlLCBkYXRhKSk7XG4gICAgfSxcbiAgICBmaW5kUmVsYXRlZFJlY29yZHMoc291cmNlLCBxdWVyeSkge1xuICAgICAgICByZXR1cm4gR2V0T3BlcmF0b3JzLmZpbmRSZWxhdGVkUmVjb3Jkcyhzb3VyY2UsIHF1ZXJ5KS50aGVuKGRhdGEgPT4gZGVzZXJpYWxpemUoc291cmNlLCBkYXRhKSk7XG4gICAgfVxufTsiXX0=