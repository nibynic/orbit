'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.encodeQueryParams = encodeQueryParams;
exports.appendQueryParams = appendQueryParams;
function flattenObjectToParams(obj) {
    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    var params = [];
    Object.keys(obj).forEach(function (key) {
        if (!obj.hasOwnProperty(key)) {
            return;
        }
        var newPath = path.slice();
        newPath.push(key);
        if (obj[key] !== null && typeof obj[key] === 'object') {
            Array.prototype.push.apply(params, flattenObjectToParams(obj[key], newPath));
        } else {
            params.push({
                path: newPath,
                val: obj[key]
            });
        }
    });
    return params;
}
function encodeQueryParams(obj) {
    return flattenObjectToParams(obj).map(function (param) {
        if (param.path.length === 1) {
            param.path = param.path[0];
        } else {
            var firstSegment = param.path[0];
            var remainingSegments = param.path.slice(1);
            param.path = firstSegment + '[' + remainingSegments.join('][') + ']';
        }
        return param;
    }).map(function (param) {
        return encodeURIComponent(param.path) + '=' + encodeURIComponent(param.val);
    }).join('&');
}
function appendQueryParams(url, obj) {
    var fullUrl = url;
    if (obj.filter && Array.isArray(obj.filter)) {
        var filter = obj.filter;
        delete obj.filter;
        filter.forEach(function (filterOption) {
            fullUrl = appendQueryParams(fullUrl, { filter: filterOption });
        });
    }
    var queryParams = encodeQueryParams(obj);
    if (queryParams.length > 0) {
        fullUrl += nextQueryParamIndicator(fullUrl);
        fullUrl += queryParams;
    }
    return fullUrl;
}
function nextQueryParamIndicator(url) {
    if (url.indexOf('?') === -1) {
        return '?';
    }
    return '&';
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9xdWVyeS1wYXJhbXMuanMiXSwibmFtZXMiOlsicGF0aCIsInBhcmFtcyIsIk9iamVjdCIsIm9iaiIsIm5ld1BhdGgiLCJBcnJheSIsImZsYXR0ZW5PYmplY3RUb1BhcmFtcyIsInZhbCIsInBhcmFtIiwiZmlyc3RTZWdtZW50IiwicmVtYWluaW5nU2VnbWVudHMiLCJlbmNvZGVVUklDb21wb25lbnQiLCJmdWxsVXJsIiwiZmlsdGVyIiwiYXBwZW5kUXVlcnlQYXJhbXMiLCJxdWVyeVBhcmFtcyIsImVuY29kZVF1ZXJ5UGFyYW1zIiwibmV4dFF1ZXJ5UGFyYW1JbmRpY2F0b3IiLCJ1cmwiXSwibWFwcGluZ3MiOiI7Ozs7O1FBbUJPLGlCLEdBQUEsaUI7UUFZQSxpQixHQUFBLGlCO0FBL0JQLFNBQUEscUJBQUEsQ0FBQSxHQUFBLEVBQStDO0FBQUEsUUFBWEEsT0FBVyxVQUFBLE1BQUEsR0FBQSxDQUFBLElBQUEsVUFBQSxDQUFBLE1BQUEsU0FBQSxHQUFBLFVBQUEsQ0FBQSxDQUFBLEdBQUosRUFBSTs7QUFDM0MsUUFBSUMsU0FBSixFQUFBO0FBQ0FDLFdBQUFBLElBQUFBLENBQUFBLEdBQUFBLEVBQUFBLE9BQUFBLENBQXlCLFVBQUEsR0FBQSxFQUFPO0FBQzVCLFlBQUksQ0FBQ0MsSUFBQUEsY0FBQUEsQ0FBTCxHQUFLQSxDQUFMLEVBQThCO0FBQzFCO0FBQ0g7QUFDRCxZQUFJQyxVQUFVSixLQUFkLEtBQWNBLEVBQWQ7QUFDQUksZ0JBQUFBLElBQUFBLENBQUFBLEdBQUFBO0FBQ0EsWUFBSUQsSUFBQUEsR0FBQUEsTUFBQUEsSUFBQUEsSUFBcUIsT0FBT0EsSUFBUCxHQUFPQSxDQUFQLEtBQXpCLFFBQUEsRUFBdUQ7QUFDbkRFLGtCQUFBQSxTQUFBQSxDQUFBQSxJQUFBQSxDQUFBQSxLQUFBQSxDQUFBQSxNQUFBQSxFQUFtQ0Msc0JBQXNCSCxJQUF0QkcsR0FBc0JILENBQXRCRyxFQUFuQ0QsT0FBbUNDLENBQW5DRDtBQURKLFNBQUEsTUFFTztBQUNISixtQkFBQUEsSUFBQUEsQ0FBWTtBQUNSRCxzQkFEUSxPQUFBO0FBRVJPLHFCQUFLSixJQUFBQSxHQUFBQTtBQUZHLGFBQVpGO0FBSUg7QUFiTEMsS0FBQUE7QUFlQSxXQUFBLE1BQUE7QUFDSDtBQUNNLFNBQUEsaUJBQUEsQ0FBQSxHQUFBLEVBQWdDO0FBQ25DLFdBQU8sc0JBQUEsR0FBQSxFQUFBLEdBQUEsQ0FBK0IsVUFBQSxLQUFBLEVBQVM7QUFDM0MsWUFBSU0sTUFBQUEsSUFBQUEsQ0FBQUEsTUFBQUEsS0FBSixDQUFBLEVBQTZCO0FBQ3pCQSxrQkFBQUEsSUFBQUEsR0FBYUEsTUFBQUEsSUFBQUEsQ0FBYkEsQ0FBYUEsQ0FBYkE7QUFESixTQUFBLE1BRU87QUFDSCxnQkFBSUMsZUFBZUQsTUFBQUEsSUFBQUEsQ0FBbkIsQ0FBbUJBLENBQW5CO0FBQ0EsZ0JBQUlFLG9CQUFvQkYsTUFBQUEsSUFBQUEsQ0FBQUEsS0FBQUEsQ0FBeEIsQ0FBd0JBLENBQXhCO0FBQ0FBLGtCQUFBQSxJQUFBQSxHQUFhQyxlQUFBQSxHQUFBQSxHQUFxQkMsa0JBQUFBLElBQUFBLENBQXJCRCxJQUFxQkMsQ0FBckJELEdBQWJELEdBQUFBO0FBQ0g7QUFDRCxlQUFBLEtBQUE7QUFSRyxLQUFBLEVBQUEsR0FBQSxDQVNBLFVBQUEsS0FBQSxFQUFBO0FBQUEsZUFBU0csbUJBQW1CSCxNQUFuQkcsSUFBQUEsSUFBQUEsR0FBQUEsR0FBdUNBLG1CQUFtQkgsTUFBbkUsR0FBZ0RHLENBQWhEO0FBVEEsS0FBQSxFQUFBLElBQUEsQ0FBUCxHQUFPLENBQVA7QUFVSDtBQUNNLFNBQUEsaUJBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxFQUFxQztBQUN4QyxRQUFJQyxVQUFKLEdBQUE7QUFDQSxRQUFJVCxJQUFBQSxNQUFBQSxJQUFjRSxNQUFBQSxPQUFBQSxDQUFjRixJQUFoQyxNQUFrQkUsQ0FBbEIsRUFBNkM7QUFDekMsWUFBSVEsU0FBU1YsSUFBYixNQUFBO0FBQ0EsZUFBT0EsSUFBUCxNQUFBO0FBQ0FVLGVBQUFBLE9BQUFBLENBQWUsVUFBQSxZQUFBLEVBQWdCO0FBQzNCRCxzQkFBVUUsa0JBQUFBLE9BQUFBLEVBQTJCLEVBQUVELFFBQXZDRCxZQUFxQyxFQUEzQkUsQ0FBVkY7QUFESkMsU0FBQUE7QUFHSDtBQUNELFFBQUlFLGNBQWNDLGtCQUFsQixHQUFrQkEsQ0FBbEI7QUFDQSxRQUFJRCxZQUFBQSxNQUFBQSxHQUFKLENBQUEsRUFBNEI7QUFDeEJILG1CQUFXSyx3QkFBWEwsT0FBV0ssQ0FBWEw7QUFDQUEsbUJBQUFBLFdBQUFBO0FBQ0g7QUFDRCxXQUFBLE9BQUE7QUFDSDtBQUNELFNBQUEsdUJBQUEsQ0FBQSxHQUFBLEVBQXNDO0FBQ2xDLFFBQUlNLElBQUFBLE9BQUFBLENBQUFBLEdBQUFBLE1BQXFCLENBQXpCLENBQUEsRUFBNkI7QUFDekIsZUFBQSxHQUFBO0FBQ0g7QUFDRCxXQUFBLEdBQUE7QUFDSCIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGZsYXR0ZW5PYmplY3RUb1BhcmFtcyhvYmosIHBhdGggPSBbXSkge1xuICAgIGxldCBwYXJhbXMgPSBbXTtcbiAgICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgaWYgKCFvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxldCBuZXdQYXRoID0gcGF0aC5zbGljZSgpO1xuICAgICAgICBuZXdQYXRoLnB1c2goa2V5KTtcbiAgICAgICAgaWYgKG9ialtrZXldICE9PSBudWxsICYmIHR5cGVvZiBvYmpba2V5XSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHBhcmFtcywgZmxhdHRlbk9iamVjdFRvUGFyYW1zKG9ialtrZXldLCBuZXdQYXRoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJhbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgcGF0aDogbmV3UGF0aCxcbiAgICAgICAgICAgICAgICB2YWw6IG9ialtrZXldXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBwYXJhbXM7XG59XG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlUXVlcnlQYXJhbXMob2JqKSB7XG4gICAgcmV0dXJuIGZsYXR0ZW5PYmplY3RUb1BhcmFtcyhvYmopLm1hcChwYXJhbSA9PiB7XG4gICAgICAgIGlmIChwYXJhbS5wYXRoLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgcGFyYW0ucGF0aCA9IHBhcmFtLnBhdGhbMF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgZmlyc3RTZWdtZW50ID0gcGFyYW0ucGF0aFswXTtcbiAgICAgICAgICAgIGxldCByZW1haW5pbmdTZWdtZW50cyA9IHBhcmFtLnBhdGguc2xpY2UoMSk7XG4gICAgICAgICAgICBwYXJhbS5wYXRoID0gZmlyc3RTZWdtZW50ICsgJ1snICsgcmVtYWluaW5nU2VnbWVudHMuam9pbignXVsnKSArICddJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyYW07XG4gICAgfSkubWFwKHBhcmFtID0+IGVuY29kZVVSSUNvbXBvbmVudChwYXJhbS5wYXRoKSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChwYXJhbS52YWwpKS5qb2luKCcmJyk7XG59XG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kUXVlcnlQYXJhbXModXJsLCBvYmopIHtcbiAgICBsZXQgZnVsbFVybCA9IHVybDtcbiAgICBpZiAob2JqLmZpbHRlciAmJiBBcnJheS5pc0FycmF5KG9iai5maWx0ZXIpKSB7XG4gICAgICAgIGxldCBmaWx0ZXIgPSBvYmouZmlsdGVyO1xuICAgICAgICBkZWxldGUgb2JqLmZpbHRlcjtcbiAgICAgICAgZmlsdGVyLmZvckVhY2goZmlsdGVyT3B0aW9uID0+IHtcbiAgICAgICAgICAgIGZ1bGxVcmwgPSBhcHBlbmRRdWVyeVBhcmFtcyhmdWxsVXJsLCB7IGZpbHRlcjogZmlsdGVyT3B0aW9uIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgbGV0IHF1ZXJ5UGFyYW1zID0gZW5jb2RlUXVlcnlQYXJhbXMob2JqKTtcbiAgICBpZiAocXVlcnlQYXJhbXMubGVuZ3RoID4gMCkge1xuICAgICAgICBmdWxsVXJsICs9IG5leHRRdWVyeVBhcmFtSW5kaWNhdG9yKGZ1bGxVcmwpO1xuICAgICAgICBmdWxsVXJsICs9IHF1ZXJ5UGFyYW1zO1xuICAgIH1cbiAgICByZXR1cm4gZnVsbFVybDtcbn1cbmZ1bmN0aW9uIG5leHRRdWVyeVBhcmFtSW5kaWNhdG9yKHVybCkge1xuICAgIGlmICh1cmwuaW5kZXhPZignPycpID09PSAtMSkge1xuICAgICAgICByZXR1cm4gJz8nO1xuICAgIH1cbiAgICByZXR1cm4gJyYnO1xufSJdfQ==