'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _data = require('@orbit/data');

var _utils = require('@orbit/utils');

exports.default = {
    addRecord(cache, op) {
        let record = op.record;
        const records = cache.records(record.type);
        records.set(record.id, record);
        if (cache.keyMap) {
            cache.keyMap.pushRecord(record);
        }
        return record;
    },
    replaceRecord(cache, op) {
        const updates = op.record;
        const records = cache.records(updates.type);
        const current = records.get(updates.id);
        const record = (0, _data.mergeRecords)(current, updates);
        records.set(record.id, record);
        if (cache.keyMap) {
            cache.keyMap.pushRecord(record);
        }
        return record;
    },
    removeRecord(cache, op) {
        const { type, id } = op.record;
        const records = cache.records(type);
        const result = records.get(id);
        if (result) {
            records.remove(id);
            return result;
        } else {
            return null;
        }
    },
    replaceKey(cache, op) {
        const { type, id } = op.record;
        const records = cache.records(type);
        let record = records.get(id);
        if (record) {
            record = (0, _utils.clone)(record);
        } else {
            record = { type, id };
        }
        (0, _utils.deepSet)(record, ['keys', op.key], op.value);
        records.set(id, record);
        if (cache.keyMap) {
            cache.keyMap.pushRecord(record);
        }
        return record;
    },
    replaceAttribute(cache, op) {
        const { type, id } = op.record;
        const records = cache.records(type);
        let record = records.get(id);
        if (record) {
            record = (0, _utils.clone)(record);
        } else {
            record = { type, id };
        }
        (0, _utils.deepSet)(record, ['attributes', op.attribute], op.value);
        records.set(id, record);
        return record;
    },
    addToRelatedRecords(cache, op) {
        const { type, id } = op.record;
        const records = cache.records(type);
        let record = records.get(id);
        if (record) {
            record = (0, _utils.clone)(record);
        } else {
            record = { type, id };
        }
        const relatedRecords = (0, _utils.deepGet)(record, ['relationships', op.relationship, 'data']) || [];
        relatedRecords.push(op.relatedRecord);
        (0, _utils.deepSet)(record, ['relationships', op.relationship, 'data'], relatedRecords);
        records.set(id, record);
        return record;
    },
    removeFromRelatedRecords(cache, op) {
        const { type, id } = op.record;
        const records = cache.records(type);
        let record = records.get(id);
        if (record) {
            record = (0, _utils.clone)(record);
            let relatedRecords = (0, _utils.deepGet)(record, ['relationships', op.relationship, 'data']);
            if (relatedRecords) {
                relatedRecords = relatedRecords.filter(r => !(0, _data.equalRecordIdentities)(r, op.relatedRecord));
                if ((0, _utils.deepSet)(record, ['relationships', op.relationship, 'data'], relatedRecords)) {
                    records.set(id, record);
                }
            }
            return record;
        }
        return null;
    },
    replaceRelatedRecords(cache, op) {
        const { type, id } = op.record;
        const records = cache.records(type);
        let record = records.get(id);
        if (record) {
            record = (0, _utils.clone)(record);
        } else {
            record = { type, id };
        }
        if ((0, _utils.deepSet)(record, ['relationships', op.relationship, 'data'], op.relatedRecords)) {
            records.set(id, record);
        }
        return record;
    },
    replaceRelatedRecord(cache, op) {
        const { type, id } = op.record;
        const records = cache.records(type);
        let record = records.get(id);
        if (record) {
            record = (0, _utils.clone)(record);
        } else {
            record = { type, id };
        }
        if ((0, _utils.deepSet)(record, ['relationships', op.relationship, 'data'], op.relatedRecord)) {
            records.set(id, record);
        }
        return record;
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,