'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.QueryOperators = undefined;

var _utils = require('@orbit/utils');

var _data = require('@orbit/data');

const EMPTY = () => {};
const QueryOperators = exports.QueryOperators = {
    findRecord(cache, expression) {
        const { type, id } = expression.record;
        const record = cache.records(type).get(id);
        if (!record) {
            throw new _data.RecordNotFoundException(type, id);
        }
        return record;
    },
    findRecords(cache, expression) {
        let results = Array.from(cache.records(expression.type).values());
        if (expression.filter) {
            results = filterRecords(results, expression.filter);
        }
        if (expression.sort) {
            results = sortRecords(results, expression.sort);
        }
        if (expression.page) {
            results = paginateRecords(results, expression.page);
        }
        return results;
    },
    findRelatedRecords(cache, expression) {
        const { record, relationship } = expression;
        const { type, id } = record;
        const currentRecord = cache.records(type).get(id);
        const data = currentRecord && (0, _utils.deepGet)(currentRecord, ['relationships', relationship, 'data']);
        if (!data) {
            return [];
        }
        return data.map(r => cache.records(r.type).get(r.id));
    },
    findRelatedRecord(cache, expression) {
        const { record, relationship } = expression;
        const { type, id } = record;
        const currentRecord = cache.records(type).get(id);
        const data = currentRecord && (0, _utils.deepGet)(currentRecord, ['relationships', relationship, 'data']);
        if (!data) {
            return null;
        }
        const r = data;
        return cache.records(r.type).get(r.id);
    }
};
function filterRecords(records, filters) {
    return records.filter(record => {
        for (let i = 0, l = filters.length; i < l; i++) {
            if (!applyFilter(record, filters[i])) {
                return false;
            }
        }
        return true;
    });
}
function applyFilter(record, filter) {
    if (filter.kind === 'attribute') {
        let actual = (0, _utils.deepGet)(record, ['attributes', filter.attribute]);
        let expected = filter.value;
        switch (filter.op) {
            case 'equal':
                return actual === expected;
            case 'gt':
                return actual > expected;
            case 'gte':
                return actual >= expected;
            case 'lt':
                return actual < expected;
            case 'lte':
                return actual <= expected;
            default:
                throw new _data.QueryExpressionParseError('Filter operation ${filter.op} not recognized for Store.', filter);
        }
    } else if (filter.kind === 'relatedRecords') {
        let relation = (0, _utils.deepGet)(record, ['relationships', filter.relation]);
        let actual = relation === undefined ? [] : relation.data;
        let expected = filter.records;
        switch (filter.op) {
            case 'equal':
                return actual.length === expected.length && expected.every(e => actual.some(a => a.id === e.id && a.type === e.type));
            case 'all':
                return expected.every(e => actual.some(a => a.id === e.id && a.type === e.type));
            case 'some':
                return expected.some(e => actual.some(a => a.id === e.id && a.type === e.type));
            case 'none':
                return !expected.some(e => actual.some(a => a.id === e.id && a.type === e.type));
            default:
                throw new _data.QueryExpressionParseError('Filter operation ${filter.op} not recognized for Store.', filter);
        }
    } else if (filter.kind === 'relatedRecord') {
        let relation = (0, _utils.deepGet)(record, ["relationships", filter.relation]);
        let actual = relation === undefined ? undefined : relation.data;
        let expected = filter.record;
        switch (filter.op) {
            case 'equal':
                if (Array.isArray(expected)) {
                    return actual !== undefined && expected.some(e => actual.type === e.type && actual.id === e.id);
                } else {
                    return actual !== undefined && actual.type === expected.type && actual.id === expected.id;
                }
            default:
                throw new _data.QueryExpressionParseError('Filter operation ${filter.op} not recognized for Store.', filter);
        }
    }
    return false;
}
function sortRecords(records, sortSpecifiers) {
    const comparisonValues = new Map();
    records.forEach(record => {
        comparisonValues.set(record, sortSpecifiers.map(sortSpecifier => {
            if (sortSpecifier.kind === 'attribute') {
                return (0, _utils.deepGet)(record, ['attributes', sortSpecifier.attribute]);
            } else {
                throw new _data.QueryExpressionParseError('Sort specifier ${sortSpecifier.kind} not recognized for Store.', sortSpecifier);
            }
        }));
    });
    const comparisonOrders = sortSpecifiers.map(sortExpression => sortExpression.order === 'descending' ? -1 : 1);
    return records.sort((record1, record2) => {
        const values1 = comparisonValues.get(record1);
        const values2 = comparisonValues.get(record2);
        for (let i = 0; i < sortSpecifiers.length; i++) {
            if (values1[i] < values2[i]) {
                return -comparisonOrders[i];
            } else if (values1[i] > values2[i]) {
                return comparisonOrders[i];
            } else if ((0, _utils.isNone)(values1[i]) && !(0, _utils.isNone)(values2[i])) {
                return comparisonOrders[i];
            } else if ((0, _utils.isNone)(values2[i]) && !(0, _utils.isNone)(values1[i])) {
                return -comparisonOrders[i];
            }
        }
        return 0;
    });
}
function paginateRecords(records, paginationOptions) {
    if (paginationOptions.limit !== undefined) {
        let offset = paginationOptions.offset === undefined ? 0 : paginationOptions.offset;
        let limit = paginationOptions.limit;
        return records.slice(offset, offset + limit);
    } else {
        throw new _data.QueryExpressionParseError('Pagination options not recognized for Store. Please specify `offset` and `limit`.', paginationOptions);
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNhY2hlL3F1ZXJ5LW9wZXJhdG9ycy5qcyJdLCJuYW1lcyI6WyJFTVBUWSIsIlF1ZXJ5T3BlcmF0b3JzIiwiZmluZFJlY29yZCIsImNhY2hlIiwiZXhwcmVzc2lvbiIsInR5cGUiLCJpZCIsInJlY29yZCIsInJlY29yZHMiLCJnZXQiLCJSZWNvcmROb3RGb3VuZEV4Y2VwdGlvbiIsImZpbmRSZWNvcmRzIiwicmVzdWx0cyIsIkFycmF5IiwiZnJvbSIsInZhbHVlcyIsImZpbHRlciIsImZpbHRlclJlY29yZHMiLCJzb3J0Iiwic29ydFJlY29yZHMiLCJwYWdlIiwicGFnaW5hdGVSZWNvcmRzIiwiZmluZFJlbGF0ZWRSZWNvcmRzIiwicmVsYXRpb25zaGlwIiwiY3VycmVudFJlY29yZCIsImRhdGEiLCJtYXAiLCJyIiwiZmluZFJlbGF0ZWRSZWNvcmQiLCJmaWx0ZXJzIiwiaSIsImwiLCJsZW5ndGgiLCJhcHBseUZpbHRlciIsImtpbmQiLCJhY3R1YWwiLCJhdHRyaWJ1dGUiLCJleHBlY3RlZCIsInZhbHVlIiwib3AiLCJRdWVyeUV4cHJlc3Npb25QYXJzZUVycm9yIiwicmVsYXRpb24iLCJ1bmRlZmluZWQiLCJldmVyeSIsImUiLCJzb21lIiwiYSIsImlzQXJyYXkiLCJzb3J0U3BlY2lmaWVycyIsImNvbXBhcmlzb25WYWx1ZXMiLCJNYXAiLCJmb3JFYWNoIiwic2V0Iiwic29ydFNwZWNpZmllciIsImNvbXBhcmlzb25PcmRlcnMiLCJzb3J0RXhwcmVzc2lvbiIsIm9yZGVyIiwicmVjb3JkMSIsInJlY29yZDIiLCJ2YWx1ZXMxIiwidmFsdWVzMiIsInBhZ2luYXRpb25PcHRpb25zIiwibGltaXQiLCJvZmZzZXQiLCJzbGljZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBLE1BQU1BLFFBQVEsTUFBTSxDQUFFLENBQXRCO0FBQ08sTUFBTUMsMENBQWlCO0FBQzFCQyxlQUFXQyxLQUFYLEVBQWtCQyxVQUFsQixFQUE4QjtBQUMxQixjQUFN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a0JBQWtCRSxNQUE1RTtBQUNBLFlBQUlELFFBQVFELGtCQUFrQkMsS0FBOUI7QUFDQSxlQUFPdEQsUUFBUXdELEtBQVIsQ0FBY0QsTUFBZCxFQUFzQkEsU0FBU0QsS0FBL0IsQ0FBUDtBQUNILEtBSkQsTUFJTztBQUNILGNBQU0sSUFBSXRCLCtCQUFKLENBQThCLG1GQUE5QixFQUFtSHFCLGlCQUFuSCxDQUFOO0FBQ0g7QUFDSiIsImZpbGUiOiJjYWNoZS9xdWVyeS1vcGVyYXRvcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWVwR2V0LCBpc05vbmUgfSBmcm9tICdAb3JiaXQvdXRpbHMnO1xuaW1wb3J0IHsgUmVjb3JkTm90Rm91bmRFeGNlcHRpb24sIFF1ZXJ5RXhwcmVzc2lvblBhcnNlRXJyb3IgfSBmcm9tICdAb3JiaXQvZGF0YSc7XG5jb25zdCBFTVBUWSA9ICgpID0+IHt9O1xuZXhwb3J0IGNvbnN0IFF1ZXJ5T3BlcmF0b3JzID0ge1xuICAgIGZpbmRSZWNvcmQoY2FjaGUsIGV4cHJlc3Npb24pIHtcbiAgICAgICAgY29uc3QgeyB0eXBlLCBpZCB9ID0gZXhwcmVzc2lvbi5yZWNvcmQ7XG4gICAgICAgIGNvbnN0IHJlY29yZCA9IGNhY2hlLnJlY29yZHModHlwZSkuZ2V0KGlkKTtcbiAgICAgICAgaWYgKCFyZWNvcmQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSZWNvcmROb3RGb3VuZEV4Y2VwdGlvbih0eXBlLCBpZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlY29yZDtcbiAgICB9LFxuICAgIGZpbmRSZWNvcmRzKGNhY2hlLCBleHByZXNzaW9uKSB7XG4gICAgICAgIGxldCByZXN1bHRzID0gQXJyYXkuZnJvbShjYWNoZS5yZWNvcmRzKGV4cHJlc3Npb24udHlwZSkudmFsdWVzKCkpO1xuICAgICAgICBpZiAoZXhwcmVzc2lvbi5maWx0ZXIpIHtcbiAgICAgICAgICAgIHJlc3VsdHMgPSBmaWx0ZXJSZWNvcmRzKHJlc3VsdHMsIGV4cHJlc3Npb24uZmlsdGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXhwcmVzc2lvbi5zb3J0KSB7XG4gICAgICAgICAgICByZXN1bHRzID0gc29ydFJlY29yZHMocmVzdWx0cywgZXhwcmVzc2lvbi5zb3J0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXhwcmVzc2lvbi5wYWdlKSB7XG4gICAgICAgICAgICByZXN1bHRzID0gcGFnaW5hdGVSZWNvcmRzKHJlc3VsdHMsIGV4cHJlc3Npb24ucGFnZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfSxcbiAgICBmaW5kUmVsYXRlZFJlY29yZHMoY2FjaGUsIGV4cHJlc3Npb24pIHtcbiAgICAgICAgY29uc3QgeyByZWNvcmQsIHJlbGF0aW9uc2hpcCB9ID0gZXhwcmVzc2lvbjtcbiAgICAgICAgY29uc3QgeyB0eXBlLCBpZCB9ID0gcmVjb3JkO1xuICAgICAgICBjb25zdCBjdXJyZW50UmVjb3JkID0gY2FjaGUucmVjb3Jkcyh0eXBlKS5nZXQoaWQpO1xuICAgICAgICBjb25zdCBkYXRhID0gY3VycmVudFJlY29yZCAmJiBkZWVwR2V0KGN1cnJlbnRSZWNvcmQsIFsncmVsYXRpb25zaGlwcycsIHJlbGF0aW9uc2hpcCwgJ2RhdGEnXSk7XG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRhLm1hcChyID0+IGNhY2hlLnJlY29yZHMoci50eXBlKS5nZXQoci5pZCkpO1xuICAgIH0sXG4gICAgZmluZFJlbGF0ZWRSZWNvcmQoY2FjaGUsIGV4cHJlc3Npb24pIHtcbiAgICAgICAgY29uc3QgeyByZWNvcmQsIHJlbGF0aW9uc2hpcCB9ID0gZXhwcmVzc2lvbjtcbiAgICAgICAgY29uc3QgeyB0eXBlLCBpZCB9ID0gcmVjb3JkO1xuICAgICAgICBjb25zdCBjdXJyZW50UmVjb3JkID0gY2FjaGUucmVjb3Jkcyh0eXBlKS5nZXQoaWQpO1xuICAgICAgICBjb25zdCBkYXRhID0gY3VycmVudFJlY29yZCAmJiBkZWVwR2V0KGN1cnJlbnRSZWNvcmQsIFsncmVsYXRpb25zaGlwcycsIHJlbGF0aW9uc2hpcCwgJ2RhdGEnXSk7XG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgciA9IGRhdGE7XG4gICAgICAgIHJldHVybiBjYWNoZS5yZWNvcmRzKHIudHlwZSkuZ2V0KHIuaWQpO1xuICAgIH1cbn07XG5mdW5jdGlvbiBmaWx0ZXJSZWNvcmRzKHJlY29yZHMsIGZpbHRlcnMpIHtcbiAgICByZXR1cm4gcmVjb3Jkcy5maWx0ZXIocmVjb3JkID0+IHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBmaWx0ZXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgaWYgKCFhcHBseUZpbHRlcihyZWNvcmQsIGZpbHRlcnNbaV0pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gYXBwbHlGaWx0ZXIocmVjb3JkLCBmaWx0ZXIpIHtcbiAgICBpZiAoZmlsdGVyLmtpbmQgPT09ICdhdHRyaWJ1dGUnKSB7XG4gICAgICAgIGxldCBhY3R1YWwgPSBkZWVwR2V0KHJlY29yZCwgWydhdHRyaWJ1dGVzJywgZmlsdGVyLmF0dHJpYnV0ZV0pO1xuICAgICAgICBsZXQgZXhwZWN0ZWQgPSBmaWx0ZXIudmFsdWU7XG4gICAgICAgIHN3aXRjaCAoZmlsdGVyLm9wKSB7XG4gICAgICAgICAgICBjYXNlICdlcXVhbCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjdHVhbCA9PT0gZXhwZWN0ZWQ7XG4gICAgICAgICAgICBjYXNlICdndCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjdHVhbCA+IGV4cGVjdGVkO1xuICAgICAgICAgICAgY2FzZSAnZ3RlJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gYWN0dWFsID49IGV4cGVjdGVkO1xuICAgICAgICAgICAgY2FzZSAnbHQnOlxuICAgICAgICAgICAgICAgIHJldHVybiBhY3R1YWwgPCBleHBlY3RlZDtcbiAgICAgICAgICAgIGNhc2UgJ2x0ZSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjdHVhbCA8PSBleHBlY3RlZDtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFF1ZXJ5RXhwcmVzc2lvblBhcnNlRXJyb3IoJ0ZpbHRlciBvcGVyYXRpb24gJHtmaWx0ZXIub3B9IG5vdCByZWNvZ25pemVkIGZvciBTdG9yZS4nLCBmaWx0ZXIpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChmaWx0ZXIua2luZCA9PT0gJ3JlbGF0ZWRSZWNvcmRzJykge1xuICAgICAgICBsZXQgcmVsYXRpb24gPSBkZWVwR2V0KHJlY29yZCwgWydyZWxhdGlvbnNoaXBzJywgZmlsdGVyLnJlbGF0aW9uXSk7XG4gICAgICAgIGxldCBhY3R1YWwgPSByZWxhdGlvbiA9PT0gdW5kZWZpbmVkID8gW10gOiByZWxhdGlvbi5kYXRhO1xuICAgICAgICBsZXQgZXhwZWN0ZWQgPSBmaWx0ZXIucmVjb3JkcztcbiAgICAgICAgc3dpdGNoIChmaWx0ZXIub3ApIHtcbiAgICAgICAgICAgIGNhc2UgJ2VxdWFsJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gYWN0dWFsLmxlbmd0aCA9PT0gZXhwZWN0ZWQubGVuZ3RoICYmIGV4cGVjdGVkLmV2ZXJ5KGUgPT4gYWN0dWFsLnNvbWUoYSA9PiBhLmlkID09PSBlLmlkICYmIGEudHlwZSA9PT0gZS50eXBlKSk7XG4gICAgICAgICAgICBjYXNlICdhbGwnOlxuICAgICAgICAgICAgICAgIHJldHVybiBleHBlY3RlZC5ldmVyeShlID0+IGFjdHVhbC5zb21lKGEgPT4gYS5pZCA9PT0gZS5pZCAmJiBhLnR5cGUgPT09IGUudHlwZSkpO1xuICAgICAgICAgICAgY2FzZSAnc29tZSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGV4cGVjdGVkLnNvbWUoZSA9PiBhY3R1YWwuc29tZShhID0+IGEuaWQgPT09IGUuaWQgJiYgYS50eXBlID09PSBlLnR5cGUpKTtcbiAgICAgICAgICAgIGNhc2UgJ25vbmUnOlxuICAgICAgICAgICAgICAgIHJldHVybiAhZXhwZWN0ZWQuc29tZShlID0+IGFjdHVhbC5zb21lKGEgPT4gYS5pZCA9PT0gZS5pZCAmJiBhLnR5cGUgPT09IGUudHlwZSkpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUXVlcnlFeHByZXNzaW9uUGFyc2VFcnJvcignRmlsdGVyIG9wZXJhdGlvbiAke2ZpbHRlci5vcH0gbm90IHJlY29nbml6ZWQgZm9yIFN0b3JlLicsIGZpbHRlcik7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGZpbHRlci5raW5kID09PSAncmVsYXRlZFJlY29yZCcpIHtcbiAgICAgICAgbGV0IHJlbGF0aW9uID0gZGVlcEdldChyZWNvcmQsIFtcInJlbGF0aW9uc2hpcHNcIiwgZmlsdGVyLnJlbGF0aW9uXSk7XG4gICAgICAgIGxldCBhY3R1YWwgPSByZWxhdGlvbiA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVsYXRpb24uZGF0YTtcbiAgICAgICAgbGV0IGV4cGVjdGVkID0gZmlsdGVyLnJlY29yZDtcbiAgICAgICAgc3dpdGNoIChmaWx0ZXIub3ApIHtcbiAgICAgICAgICAgIGNhc2UgJ2VxdWFsJzpcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShleHBlY3RlZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjdHVhbCAhPT0gdW5kZWZpbmVkICYmIGV4cGVjdGVkLnNvbWUoZSA9PiBhY3R1YWwudHlwZSA9PT0gZS50eXBlICYmIGFjdHVhbC5pZCA9PT0gZS5pZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjdHVhbCAhPT0gdW5kZWZpbmVkICYmIGFjdHVhbC50eXBlID09PSBleHBlY3RlZC50eXBlICYmIGFjdHVhbC5pZCA9PT0gZXhwZWN0ZWQuaWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUXVlcnlFeHByZXNzaW9uUGFyc2VFcnJvcignRmlsdGVyIG9wZXJhdGlvbiAke2ZpbHRlci5vcH0gbm90IHJlY29nbml6ZWQgZm9yIFN0b3JlLicsIGZpbHRlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gc29ydFJlY29yZHMocmVjb3Jkcywgc29ydFNwZWNpZmllcnMpIHtcbiAgICBjb25zdCBjb21wYXJpc29uVmFsdWVzID0gbmV3IE1hcCgpO1xuICAgIHJlY29yZHMuZm9yRWFjaChyZWNvcmQgPT4ge1xuICAgICAgICBjb21wYXJpc29uVmFsdWVzLnNldChyZWNvcmQsIHNvcnRTcGVjaWZpZXJzLm1hcChzb3J0U3BlY2lmaWVyID0+IHtcbiAgICAgICAgICAgIGlmIChzb3J0U3BlY2lmaWVyLmtpbmQgPT09ICdhdHRyaWJ1dGUnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlZXBHZXQocmVjb3JkLCBbJ2F0dHJpYnV0ZXMnLCBzb3J0U3BlY2lmaWVyLmF0dHJpYnV0ZV0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUXVlcnlFeHByZXNzaW9uUGFyc2VFcnJvcignU29ydCBzcGVjaWZpZXIgJHtzb3J0U3BlY2lmaWVyLmtpbmR9IG5vdCByZWNvZ25pemVkIGZvciBTdG9yZS4nLCBzb3J0U3BlY2lmaWVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH0pO1xuICAgIGNvbnN0IGNvbXBhcmlzb25PcmRlcnMgPSBzb3J0U3BlY2lmaWVycy5tYXAoc29ydEV4cHJlc3Npb24gPT4gc29ydEV4cHJlc3Npb24ub3JkZXIgPT09ICdkZXNjZW5kaW5nJyA/IC0xIDogMSk7XG4gICAgcmV0dXJuIHJlY29yZHMuc29ydCgocmVjb3JkMSwgcmVjb3JkMikgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZXMxID0gY29tcGFyaXNvblZhbHVlcy5nZXQocmVjb3JkMSk7XG4gICAgICAgIGNvbnN0IHZhbHVlczIgPSBjb21wYXJpc29uVmFsdWVzLmdldChyZWNvcmQyKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3J0U3BlY2lmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHZhbHVlczFbaV0gPCB2YWx1ZXMyW2ldKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC1jb21wYXJpc29uT3JkZXJzW2ldO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZXMxW2ldID4gdmFsdWVzMltpXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb21wYXJpc29uT3JkZXJzW2ldO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc05vbmUodmFsdWVzMVtpXSkgJiYgIWlzTm9uZSh2YWx1ZXMyW2ldKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb21wYXJpc29uT3JkZXJzW2ldO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc05vbmUodmFsdWVzMltpXSkgJiYgIWlzTm9uZSh2YWx1ZXMxW2ldKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAtY29tcGFyaXNvbk9yZGVyc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHBhZ2luYXRlUmVjb3JkcyhyZWNvcmRzLCBwYWdpbmF0aW9uT3B0aW9ucykge1xuICAgIGlmIChwYWdpbmF0aW9uT3B0aW9ucy5saW1pdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxldCBvZmZzZXQgPSBwYWdpbmF0aW9uT3B0aW9ucy5vZmZzZXQgPT09IHVuZGVmaW5lZCA/IDAgOiBwYWdpbmF0aW9uT3B0aW9ucy5vZmZzZXQ7XG4gICAgICAgIGxldCBsaW1pdCA9IHBhZ2luYXRpb25PcHRpb25zLmxpbWl0O1xuICAgICAgICByZXR1cm4gcmVjb3Jkcy5zbGljZShvZmZzZXQsIG9mZnNldCArIGxpbWl0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgUXVlcnlFeHByZXNzaW9uUGFyc2VFcnJvcignUGFnaW5hdGlvbiBvcHRpb25zIG5vdCByZWNvZ25pemVkIGZvciBTdG9yZS4gUGxlYXNlIHNwZWNpZnkgYG9mZnNldGAgYW5kIGBsaW1pdGAuJywgcGFnaW5hdGlvbk9wdGlvbnMpO1xuICAgIH1cbn0iXX0=