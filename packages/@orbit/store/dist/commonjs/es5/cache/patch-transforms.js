'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _data = require('@orbit/data');

var _utils = require('@orbit/utils');

exports.default = {
    addRecord: function (cache, op) {
        var record = op.record;
        var records = cache.records(record.type);
        records.set(record.id, record);
        if (cache.keyMap) {
            cache.keyMap.pushRecord(record);
        }
        return record;
    },
    replaceRecord: function (cache, op) {
        var updates = op.record;
        var records = cache.records(updates.type);
        var current = records.get(updates.id);
        var record = (0, _data.mergeRecords)(current, updates);
        records.set(record.id, record);
        if (cache.keyMap) {
            cache.keyMap.pushRecord(record);
        }
        return record;
    },
    removeRecord: function (cache, op) {
        var _op$record = op.record,
            type = _op$record.type,
            id = _op$record.id;

        var records = cache.records(type);
        var result = records.get(id);
        if (result) {
            records.remove(id);
            return result;
        } else {
            return null;
        }
    },
    replaceKey: function (cache, op) {
        var _op$record2 = op.record,
            type = _op$record2.type,
            id = _op$record2.id;

        var records = cache.records(type);
        var record = records.get(id);
        if (record) {
            record = (0, _utils.clone)(record);
        } else {
            record = { type: type, id: id };
        }
        (0, _utils.deepSet)(record, ['keys', op.key], op.value);
        records.set(id, record);
        if (cache.keyMap) {
            cache.keyMap.pushRecord(record);
        }
        return record;
    },
    replaceAttribute: function (cache, op) {
        var _op$record3 = op.record,
            type = _op$record3.type,
            id = _op$record3.id;

        var records = cache.records(type);
        var record = records.get(id);
        if (record) {
            record = (0, _utils.clone)(record);
        } else {
            record = { type: type, id: id };
        }
        (0, _utils.deepSet)(record, ['attributes', op.attribute], op.value);
        records.set(id, record);
        return record;
    },
    addToRelatedRecords: function (cache, op) {
        var _op$record4 = op.record,
            type = _op$record4.type,
            id = _op$record4.id;

        var records = cache.records(type);
        var record = records.get(id);
        if (record) {
            record = (0, _utils.clone)(record);
        } else {
            record = { type: type, id: id };
        }
        var relatedRecords = (0, _utils.deepGet)(record, ['relationships', op.relationship, 'data']) || [];
        relatedRecords.push(op.relatedRecord);
        (0, _utils.deepSet)(record, ['relationships', op.relationship, 'data'], relatedRecords);
        records.set(id, record);
        return record;
    },
    removeFromRelatedRecords: function (cache, op) {
        var _op$record5 = op.record,
            type = _op$record5.type,
            id = _op$record5.id;

        var records = cache.records(type);
        var record = records.get(id);
        if (record) {
            record = (0, _utils.clone)(record);
            var relatedRecords = (0, _utils.deepGet)(record, ['relationships', op.relationship, 'data']);
            if (relatedRecords) {
                relatedRecords = relatedRecords.filter(function (r) {
                    return !(0, _data.equalRecordIdentities)(r, op.relatedRecord);
                });
                if ((0, _utils.deepSet)(record, ['relationships', op.relationship, 'data'], relatedRecords)) {
                    records.set(id, record);
                }
            }
            return record;
        }
        return null;
    },
    replaceRelatedRecords: function (cache, op) {
        var _op$record6 = op.record,
            type = _op$record6.type,
            id = _op$record6.id;

        var records = cache.records(type);
        var record = records.get(id);
        if (record) {
            record = (0, _utils.clone)(record);
        } else {
            record = { type: type, id: id };
        }
        if ((0, _utils.deepSet)(record, ['relationships', op.relationship, 'data'], op.relatedRecords)) {
            records.set(id, record);
        }
        return record;
    },
    replaceRelatedRecord: function (cache, op) {
        var _op$record7 = op.record,
            type = _op$record7.type,
            id = _op$record7.id;

        var records = cache.records(type);
        var record = records.get(id);
        if (record) {
            record = (0, _utils.clone)(record);
        } else {
            record = { type: type, id: id };
        }
        if ((0, _utils.deepSet)(record, ['relationships', op.relationship, 'data'], op.relatedRecord)) {
            records.set(id, record);
        }
        return record;
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,