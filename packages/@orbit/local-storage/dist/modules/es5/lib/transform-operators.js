import { mergeRecords, cloneRecordIdentity, equalRecordIdentities } from '@orbit/data';
import { deepGet, deepSet } from '@orbit/utils';
export default {
    addRecord: function (source, operation) {
        source.putRecord(operation.record);
    },
    replaceRecord: function (source, operation) {
        var updates = operation.record;
        var current = source.getRecord(updates);
        var record = mergeRecords(current, updates);
        source.putRecord(record);
    },
    removeRecord: function (source, operation) {
        source.removeRecord(operation.record);
    },
    replaceKey: function (source, operation) {
        var record = source.getRecord(operation.record) || cloneRecordIdentity(operation.record);
        record.keys = record.keys || {};
        record.keys[operation.key] = operation.value;
        source.putRecord(record);
    },
    replaceAttribute: function (source, operation) {
        var record = source.getRecord(operation.record) || cloneRecordIdentity(operation.record);
        record.attributes = record.attributes || {};
        record.attributes[operation.attribute] = operation.value;
        source.putRecord(record);
    },
    addToRelatedRecords: function (source, operation) {
        var record = source.getRecord(operation.record) || cloneRecordIdentity(operation.record);
        var relationships = deepGet(record, ['relationships', operation.relationship, 'data']);
        if (relationships) {
            relationships.push(operation.relatedRecord);
        } else {
            deepSet(record, ['relationships', operation.relationship, 'data'], [operation.relatedRecord]);
        }
        source.putRecord(record);
    },
    removeFromRelatedRecords: function (source, operation) {
        var record = source.getRecord(operation.record);
        if (record) {
            var relationships = deepGet(record, ['relationships', operation.relationship, 'data']);
            if (relationships) {
                for (var i = 0, l = relationships.length; i < l; i++) {
                    if (equalRecordIdentities(relationships[i], operation.relatedRecord)) {
                        relationships.splice(i, 1);
                        break;
                    }
                }
                return source.putRecord(record);
            }
        }
    },
    replaceRelatedRecords: function (source, operation) {
        var record = source.getRecord(operation.record) || cloneRecordIdentity(operation.record);
        deepSet(record, ['relationships', operation.relationship, 'data'], operation.relatedRecords);
        source.putRecord(record);
    },
    replaceRelatedRecord: function (source, operation) {
        var record = source.getRecord(operation.record) || cloneRecordIdentity(operation.record);
        deepSet(record, ['relationships', operation.relationship, 'data'], operation.relatedRecord);
        source.putRecord(record);
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,